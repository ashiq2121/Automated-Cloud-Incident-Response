# AWS CloudFormation Template for Automated Incident Response
# Description: 
#   1. Creates Lambda function to isolate compromised EC2 instances and capture disk snapshots
#   2. Saves forensic metadata to S3
#   3. Integrates with GuardDuty alerts (simulated via manual triggers)

AWSTemplateFormatVersion: '2010-09-09'
Description: Forensic Automation with Isolation + Data Extraction to S3

Parameters:
  S3BucketName:
    Description: Name of your S3 bucket (e.g., "yourname-forensics")
    Type: String
    Default: "ashiq-forensics-ap-southeast-1"  # Name of bucket
  IsolationSGId:
    Description: ID of the 'ISOLATION' security group (e.g., "sg-12345678")
    Type: String
    Default: "sg-03355d8255b7bcbb4" # ID of isolation Security Group

Resources:
  # IAM Role: Grants Lambda permission to interact with EC2/S3
  ForensicLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ForensicPermissions
          PolicyDocument:
            Version: '2012-10-17'
              # Allows isolating EC2 instances
              # Allows creating disk snapshots
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeVolumes
                  - ec2:CreateSnapshot
                  - ec2:ModifyInstanceAttribute
                  - s3:PutObject
                  - s3:GetBucketLocation
                Resource: "*"

   # Lambda Function: Core logic for incident response
  IncidentHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: IncidentHandler
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: 120
      Role: !GetAtt ForensicLambdaRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref S3BucketName  # Pass bucket name as env variable
          ISOLATION_SG: !Ref IsolationSGId  # Pass SG ID as env variable
      Code:
        ZipFile: |
          import boto3
          import json
          import datetime
          import os

          def lambda_handler(event, context):
              ec2 = boto3.client('ec2')
              s3 = boto3.client('s3')
              
              # Get instance ID from test event
              instance_id = event.get('detail', {}).get('resource', {}).get('instanceDetails', {}).get('instanceId', 'i-badbadbad')
              
              # 1. ISOLATION: Attach the ISOLATION security group
              try:
                  ec2.modify_instance_attribute(
                      InstanceId=instance_id,
                      Groups=[os.environ['ISOLATION_SG']]  # Uses the SG ID from env
                  )
                  print(f"Isolated instance {instance_id} with SG {os.environ['ISOLATION_SG']}")
              except Exception as e:
                  print(f"Isolation failed: {str(e)}")
              
              # 2. FORENSICS: Snapshot volumes
              snapshot_ids = []
              try:
                  volumes = ec2.describe_volumes(
                      Filters=[{'Name': 'attachment.instance-id', 'Values': [instance_id]}]
                  ).get('Volumes', [])
                  for vol in volumes:
                      snapshot = ec2.create_snapshot(VolumeId=vol['VolumeId'])
                      snapshot_ids.append(snapshot['SnapshotId'])
                      print(f"Created snapshot: {snapshot['SnapshotId']}")
              except Exception as e:
                  print(f"Snapshot failed: {str(e)}")

              # 3. EVIDENCE: Upload metadata to S3
              try:
                  s3.put_object(
                      Bucket=os.environ['S3_BUCKET'],  # Uses bucket name from env
                      Key=f"{instance_id}/metadata.json",
                      Body=json.dumps({
                          "instance_id": instance_id,
                          "snapshots": snapshot_ids,
                          "timestamp": str(datetime.datetime.now()),
                          "status": "Success" if snapshot_ids else "Partial"
                      })
                  )
                  print(f"Uploaded metadata to s3://{os.environ['S3_BUCKET']}/{instance_id}/metadata.json")
              except Exception as e:
                  print(f"S3 upload failed: {str(e)}")

              return {
                  "instance_id": instance_id,
                  "snapshots": snapshot_ids,
                  "s3_location": f"s3://{os.environ['S3_BUCKET']}/{instance_id}/metadata.json"
              }

Outputs:
  LambdaFunctionName:
    Description: "Name of the Lambda function"
    Value: !Ref IncidentHandlerLambda
